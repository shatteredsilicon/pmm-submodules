#!/bin/bash

set -o errexit
set -o xtrace

. $(dirname $0)/vars

usage () {
    cat <<EOF
Usage: $0 [OPTIONS] PACKAGE

    The following options may be given :
        --help) usage ;;

    The following packages may be given:
        ${PACKAGES[@]}

Example $0 ssm-client
EOF
        exit 1
}

build_sdeb() {
    local package=$1
    local version="${ssm_version}"
    local build_dir=

    if [ "$package" != "ssm-client" ]; then
        echo 'deb packaging is only allowed for ssm-client'
        exit 1
    fi

    cd "${submodule_dir}/${package}"
    current_revision="$(git rev-parse --short  HEAD)"
	[ ! -z "$current_revision" ] || fatal "${package} : Can't not get git commit id of ${package}"
    built_filepaths="$(echo ${sdeb_records[$package]} | cut -d',' -f1)"
	built_revision="$(echo ${sdeb_records[$package]} | cut -d',' -f2)"

    all_exist=0
    for path in ${built_filepaths//:/ }
    do
        all_exist=1
        if [ ! -f "$path" ]
        then
            all_exist=0
            break
        fi
    done
    if [ "$built_revision" = "$current_revision" ] && [ "$all_exist" -gt "0" ]
	then
		echo "${package}: SDEB of revision '$current_revision' already built, skipped."
		return
	fi

    build_dir=${tmp_dir}/debbuild/SDEB/${package}-${version}
    build_ssm_client_tarball ${package} ${build_dir}
    cp -r ${submodule_dir}/${package}/debian ${build_dir}
    pushd ${build_dir}
        sed -i "s/%{_version}/${version}/g" debian/control
        sed -i "s/%{_version}/${version}/g" debian/rules
        sed -i "s/%{_version}/${version}/g" debian/changelog
        dpkg-buildpackage -S -us
    popd

    mkdir -vp ${sdeb_dir}
    rm -rf ${sdeb_dir}/${package}*
    mv ${tmp_dir}/debbuild/SDEB/${package}_${version}*.dsc ${sdeb_dir}
    mv ${tmp_dir}/debbuild/SDEB/${package}_${version}*.tar.gz ${sdeb_dir}

    printf -v sdeb_filepaths '%s:' $(ls ${sdeb_dir}/${package}*)
    sdeb_records[$package]="${sdeb_filepaths%%:},${current_revision}"

    record_content=
    for k in "${!sdeb_records[@]}"
    do
        if [ -z "${record_content}" ]
		then
			record_content="${k},${sdeb_records[${k}]}"
		else
			record_content="${record_content}"$'\n'"${k},${sdeb_records[${k}]}"
		fi
    done
    mkdir -p "${record_dir}"
    echo "$record_content" > "${sdeb_record_file}"
}

git_url_to_import_path() {
    proto="$(echo $1 | grep :// | sed -e's,^\(.*://\).*,\1,g')"
    url="$(echo ${1/$proto/})"
    user="$(echo $url | grep @ | cut -d@ -f1)"
    host="$(echo ${url/$user@/} | cut -d/ -f1 | sed 's/:/\//g')"
    path="$(echo $url | grep / | cut -d/ -f2-)"

    echo "${host}/${path%'.git'}"
}

build_ssm_client_tarball() {
    local name=$1
    local dest_dir=$2
    local sub_packages=(mongodb_exporter mysqld_exporter postgres_exporter proxysql_exporter pid-watchdog qan-agent node_exporter ssm-client)

    mkdir -p ${dest_dir}
    local pids=()
    for sub_package in ${sub_packages[@]}; do
        pushd ${submodule_dir}/${sub_package}
            local tag="${ssm_version}"
            if [ -f "${dest_dir}/${sub_package}-${tag}.tar.gz" ]; then
                echo "${sub_package}-${tag}.tar.gz exists, skipped"
            else
                local GOPATH=${tmp_dir}/deb-go/${sub_package}
                export GOPATH=${GOPATH}
                mkdir -vp ${GOPATH}

                package_path=${GOPATH}/src/$(git_url_to_import_path $(git remote get-url origin))
                mkdir -p $(dirname ${package_path})
                cp -r ${submodule_dir}/${sub_package} ${package_path}

                pushd ${package_path}
                    rm -rf vendor
                    if [ -f ./go.mod ]
                    then
                        { GO111MODULE=on go mod vendor; tar -C $(dirname ${package_path}) -czf ${dest_dir}/${sub_package}-${tag}.tar.gz $(basename ${package_path}); } & pids+=($!)
                    else
                        { GO111MODULE=off dep ensure; tar -C $(dirname ${package_path}) -czf ${dest_dir}/${sub_package}-${tag}.tar.gz $(basename ${package_path}); } & pids+=($!)
                    fi
                popd
            fi
        popd
    done
    for pid in ${pids[@]}; do
        wait ${pid}
    done
    # some of the go mod downloaded modules are write-protected,
    # make them writable first before trying to remove them
    chmod -R 0700 ${tmp_dir}/deb-go
    rm -rf ${tmp_dir}/deb-go
}

main() {
    local package=

    for arg do
        val=`echo "$arg" | sed -e 's;^--[^=]*=;;'`
        case "$arg" in
            --help)         usage ;;
            -*)             usage ;;
            *)              package="$val" ;;
        esac
    done

    if [ -z "$package" ]; then
        usage
    fi

    build_sdeb $package
}

main $@
