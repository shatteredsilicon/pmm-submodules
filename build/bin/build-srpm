#!/bin/bash

set -o errexit
#set -o xtrace
umask 0000

. $(dirname $0)/vars

RPMBUILDROOT="${tmp_dir}/rpmbuild/"
export GOPATH="${tmp_dir}/go"
export NPMPATH="${tmp_dir}/npm"
export YARNPATH="${tmp_dir}/yarn"
export NG_CLI_ANALYTICS=ci # disable sharing anonymous usage data with angular
START="$(date +%s)"
auditto="/tmp"

# Display usage message and quit
function usage ()
{
	cat <<-EOF
		Usage: $0 [OPTIONS] PACKAGE

			The following options may be given :
			    --help) usage ;;

			The following packages may be given:
			    ${packages[@]}

		Example $0 ${packages[0]}
		EOF
	exit 1
}

function fatal()
{
	printf "%5d : FATAL : %d : %s\n" $(($(date +%s) - ${START})) "${BASH_LINENO[0]}" "$1" 1>&2
	exit -2
}

function warn()
{
	printf "%5d : WARN : %d : %s\n" $(($(date +%s) - ${START})) "${BASH_LINENO[0]}" "$1"
}

function trace()
{
	printf "%5d : %s\n" $(($(date +%s) - ${START})) "$1"
}

# Check that the external commands we'll need are present
function check_commands()
{
	for cmd in git rpmbuild spectool go dep node npm yarn;
	do
		if ! command -v "${cmd}" &> /dev/null
		then
			echo "'${cmd}' is required to run this script"
			exit 1
		else
			ver="unknown"
			if [ "${cmd}" = "go" -o "${cmd}" = "dep" ]
			then
				ver="$("${cmd}" version | grep version | head -1)"
			else
				ver="$("${cmd}" --version)"
			fi
			trace "Version : ${cmd} : ${ver}"
		fi
	done
}

# Perform general setup, creating directories and such
function setup()
{
	mkdir -vp "${tmp_dir}" || fatal "Error: Failed to create tmp_dir"
	mkdir -vp "${RPMBUILDROOT}"{SOURCES,SPECS,BUILD,SRPMS,RPMS} || fatal "Error: Failed to create buildroot"
	mkdir -vp "${GOPATH}/"{src,pkg} || fatal "Error: Failed to create go path"
	mkdir -vp "${NPMPATH}/src" || fatal "Error: Failed to create npm path"
	mkdir -vp "${YARNPATH}/src" || fatal "Error: Failed to create yarn path"

	mkdir -vp "${buildlog_dir}" || fatal "Error: Failed to create buildlog dir"
	mkdir -vp "${srpm_dir}" || fatal "Error: Failed to create srpm dir"
	mkdir -vp "${record_dir}" || fatal "Error: Failed to create record dir"

	#Remove all rpmbuild sources and outputs
	rm -f "${RPMBUILDROOT}/SOURCES/"*
	rm -f "${RPMBUILDROOT}/SPECS/"*
	rm -f "${RPMBUILDROOT}/SRPMS/"*

	#Make sure cache folders exist
	for c in "${npm_config_cache}" "${GOCACHE}" "${YARN_CACHE_FOLDER}" "${NANCY_CACHE}"
	do
		if [ -n "${c}" ]
		then
			mkdir -vp "${c}"
		fi
	done

	rootver="$(cd "$(dirname "$0")" ; git rev-parse --short  HEAD)"
	auditto="${audit_dir}/${rootver}"
	mkdir -vp "${auditto}"
	trace "${package} : Auditing to ${auditto}"
}

function build_generic_tarball()
{
	package="${1}"
	packagesrc="${2}"
	version="${3}"
	workdir="${4}"

	tarball="${5:-${package}${ssm_sourcever:+-${ssm_sourcever}}.tar.gz}"


	pkgroot=""

	trace "${package} : Building tarball from ${packagesrc} into ${tarball}"

	if [ -f "${packagesrc}/${workdir:+$workdir/}Gopkg.toml" ]
	then
		pkgroot="${GOPATH}/src/$(basename "${packagesrc}")"
		mkdir -p "${pkgroot}"
		cp -rp "${packagesrc}" "${pkgroot}/../"
		(
			cd "${pkgroot}/${workdir}"
			rm -rf vendor	# Remove the vendor directory as some packages (eg alecthomas/kingpin.v2) fail on a second build attempt
			trace "${package} : Pulling go deps in $(pwd)"
			GO111MODULE=off dep ensure -vendor-only -v || fatal "${package} : dep ensure failed"
			trace "${package} : Auditing go packages"
			GO111MODULE=off go list -json -deps ./... | nancy sleuth -p Gopkg.lock -o json ${NANCY_CACHE:+-d "${NANCY_CACHE}"} > "${auditto}/${package}.json" || warn "${package} : Audit error"
		)
	elif [ -f "${packagesrc}/${workdir:+$workdir/}go.mod" ]
	then
		pkgroot="${GOPATH}/src/$(basename "${packagesrc}")"
		mkdir -p "${pkgroot}"
		cp -rp "${packagesrc}" "${pkgroot}/../"
		(
			cd "${pkgroot}/${workdir}"
			trace "${package} : Pulling go modules in $(pwd)"
			GO111MODULE=on go mod vendor || fatal "${package} : go mod failed"
			trace "${package} : Auditing go modules"
			GO111MODULE=on go list -json -deps ./... | nancy sleuth -o json ${NANCY_CACHE:+-d "${NANCY_CACHE}"} > "${auditto}/${package}.json" || warn "${package} : Audit error"
		)
	fi

	backend_pkgroot="$pkgroot"

	if [ -f "${packagesrc}/${workdir:+$workdir/}yarn.lock" ]
	then
		pkgroot="${YARNPATH}/src/$(basename "${packagesrc}")"
		mkdir -p "${pkgroot}"
		mkdir -p "${YARNPATH}/cache"
		cp -rp "${packagesrc}" "${pkgroot}/../"
		(
			cd "${pkgroot}/${workdir}"
			trace "${package} : Pulling yarn deps in $(pwd)"

			yarn --no-progress --emoji false --ignore-scripts --network-timeout 300000 || fatal "${package} : yarn failed"

			trace "${package} : Auditing with Yarn"
			# Yarn audit returns failure if any issue are found, so just check the report file is created
			yarn audit --json > "${auditto}/${package}.json" || true
				[ -s "${auditto}/${package}.json" ] || fatal "${package} : yarn audit failed"
		)
	elif [ -f "${packagesrc}/${workdir:+$workdir/}package.json" ]
	then
		pkgroot="${NPMPATH}/src/$(basename "${packagesrc}")"
		mkdir -p "${pkgroot}"
		cp -rp "${packagesrc}" "${pkgroot}/../"
		(
			cd "${pkgroot}/${workdir}"
			trace "${package} : Pulling npm deps in $(pwd)"
			npm install --no-audit --ignore-scripts --legacy-peer-deps || fatal "${package} : npm install failed"

			trace "${package} : Auditing npm package with yarn"
			#yarn import
			## Yarn audit returns failure if any issue are found, so just check the report file is created
			#yarn audit --json > "${auditto}/${package}.json" || true
			#[ -s "${auditto}/${package}.json" ] || fatal "${package} : yarn audit failed"
			warn "${package} : Vulnarability audit not implemented"
		)
	fi

	[ ! -z "$backend_pkgroot" ] && [ "$backend_pkgroot" != "$pkgroot" ] && cp -r "$backend_pkgroot/vendor" "$pkgroot"

	if [ -z "$pkgroot" ]
	then
		warn "Don't know how to get dependencies for ${package} (src: ${packagesrc} workdir: ${workdir})"
		pkgroot="${packagesrc}"
	fi

	trace "${package} : Creating tarball from ${pkgroot}"
	tar -czf "${RPMBUILDROOT}/SOURCES/${tarball}" -C "${pkgroot}/../" $(basename "${pkgroot}")
}

# Unpack named tarball from rpmbuild/SOURCES, pull dependencies and repackage
function process_3rdparty_tarball()
{
	package="${1}"
	tarball="${2}"
	packagelockfile="${3}"
	actuallockfile="${4}"

	trace "${package} : Processing ${tarball}"

	[ -r "${tarball}" ] || fatal "${package} : Cannot read tarball: ${tarball}"

	subdir=$(tar -tvzf "${tarball}" | grep '/' | head -1 | awk '{print $6}')

	[ -n "${subdir}" ] || fatal "${package} : Could not identify subdir in ${tarball}"

	mkdir -p "${tmp_dir}/tar"

	tar -C "${tmp_dir}/tar" -xzf "${tarball}"

	# If an alternative package lock file has been specified, copy it into place over the tarball supplied one
	if [ -n "${packagelockfile}" ]
	then
		[ -e "${RPMBUILDROOT}/SOURCES/${packagelockfile}" ] || fatal "${package} : Could not find package lock file (${packagelockfile})"
		[ -n "${actuallockfile}" ] || fatal "${package} : No lock file specified"

		cp "${RPMBUILDROOT}/SOURCES/${packagelockfile}" "${tmp_dir}/tar/${subdir}/${actuallockfile}"
	fi

	tarname=$(basename "${tarball}")
	version=$(echo "${tarname}" | sed "s/^${package}-\(.*\).tar.gz/\1/" )
	if [ "${version}" = "${tarname}" ]
	then
		version=""
	fi

	build_generic_tarball "${package}" "${tmp_dir}/tar/${subdir}" "${version}" "" "$(basename "${tarball}")"
}

# assemble_* functions put the spec file and sources in place for rpmbuild
# Assemble sources from package brought in via git submodule
function assemble_gitsubmodule()
{
	package="${1}"
	trace "${package} : Assembling git submodule"

	(
		cd "${submodule_dir}/${package}"
		[ -f "${package}.spec" ] || fatal "${package} : No spec file found for ${package}"

		version="${ssm_version}"

		cp "${package}.spec" "${RPMBUILDROOT}/SPECS/${package}.spec"
		sed -i "s/%{_version}/${ssm_sourcever}/g"  "${RPMBUILDROOT}/SPECS/${package}.spec"
		sed -i "s/%{_release}/${ssm_releasever}/g" "${RPMBUILDROOT}/SPECS/${package}.spec"

		# Get exterrnal dependencies
		trace "${package} : Downloading external sources"
		spectool -C "${tmp_dir}/rpmbuild/SOURCES/" -g "${tmp_dir}/rpmbuild/SPECS/${package}.spec"

		# Choose assembly method per package
		case "${package}" in
			ssm-client)
				mkdir -p "${tmp_dir}/ssm-client"
				for submod in mongodb_exporter mysqld_exporter postgres_exporter proxysql_exporter pid-watchdog qan-agent node_exporter ssm-client
				do
					subversion="${ssm_version}"
					build_generic_tarball "${submod}" "${submodule_dir}/${submod}" "${subversion}" || fatal "Failed to build ${submod} tarball for ssm-client"
					mv ${RPMBUILDROOT}/SOURCES/${submod}*.tar.gz "${tmp_dir}/ssm-client"
				done
				trace "ssm-client : Building agregate tarball"
				tar -czf "${RPMBUILDROOT}/SOURCES/ssm-client-${ssm_sourcever}.tar.gz" -C "${tmp_dir}" ssm-client
				;;
			ssm-dashboards) build_generic_tarball "${package}" "${submodule_dir}/${package}" "${version}" "pmm-app" ;;
			ssm-server) build_generic_tarball "${package}" "${submodule_dir}/${package}" "${version}" "password-page" ;;
			*) build_generic_tarball "${package}" "${submodule_dir}/${package}" "${version}" ;;
		esac
	)
}

# Assemble sources from package brought in just as spec files
function assemble_3rdparty()
{
	package="${1}"
	srcpackage="${1}"

	# Select a different source tarball for certain packages
	case "${package}" in
		percona-toolkit-ssm-minimal) srcpackage=percona-toolkit ;;
	esac

	trace "${package} : Assembling 3rd party module"

	(
		cd "${submodule_dir}/${package}"
		[ -f "${package}.spec" ] || fatal "${package} : No spec file found for ${package}"

		cp -ar * "${RPMBUILDROOT}/SOURCES/"
		mv "${RPMBUILDROOT}/SOURCES/${package}.spec" "${RPMBUILDROOT}/SPECS/${package}.spec"

		# Get exterrnal dependencies
		trace "${package} : Downloading external sources"
		spectool -C "${tmp_dir}/rpmbuild/SOURCES/" -g "${tmp_dir}/rpmbuild/SPECS/${package}.spec"

		tarball=$(find "${tmp_dir}/rpmbuild/SOURCES/" -maxdepth 1 -type f -iname "${srcpackage}*.tar.gz" | head -1)

		[ -n "${tarball}" ] || fatal "${package} : Could not find source tarball for ${srcpackage}"

		process_3rdparty_tarball "${package}" "${tarball}"
	)
}

# Package a submodule in the sources dir as a tarball
function tarball_submodule()
{
	package="${1}"

	if [ -r "${submodule_dir}/${package}/.git" ]
	then
		assemble_gitsubmodule "${package}"
	else
		assemble_3rdparty "${package}"
	fi
}

# Create the SRPM for a given package name
function create_srpm()
{
	package="${1}"

	built_filepath="$(echo ${srpm_records[$package]} | cut -d',' -f1)"
	built_revision="$(echo ${srpm_records[$package]} | cut -d',' -f2)"

	cd "${submodule_dir}/${package}"
	if [ -r "${submodule_dir}/${package}/.git" ]
	then
		current_revision="$(git rev-parse --short  HEAD)"
		[ ! -z "$current_revision" ] || fatal "${package} : Can't not get git commit id of ${package}"
	else
		[ -f "${package}.spec" ] || fatal "${package} : No spec file found for ${package}"
		current_revision="$(rpm -q --qf '%{version}-%{release}' --specfile ${package}.spec)"
	fi

	if [ "$built_revision" = "$current_revision" ] && [ -f "$built_filepath" ]
	then
		trace "${package}: SRPM of revision '$current_revision' already built, skipped."
		return
	fi

	(
		rm -rf ${tmp_dir}/rpmbuild/SRPMS/${package}*
		rm -rf ${tmp_dir}/rpmbuild/SOURCES/${package}*
		rm -f ${srpm_dir}/${package}*.src.rpm

		tarball_submodule "${package}"

		trace "${package} : Building SRPM"
		rpmbuild -bs --define "debug_package %{nil}" --define "_topdir ${RPMBUILDROOT}" "${RPMBUILDROOT}/SPECS/${package}.spec"

		mv ${tmp_dir}/rpmbuild/SRPMS/${package}*.src.rpm ${srpm_dir}
	) | tee >(
		if (grep ': WARN :' > /dev/null)
		then
			WARN=1
		else
			WARN=""
		fi

		if ( compgen -G "${srpm_dir}/${package}*.src.rpm" > /dev/null )
		then
			trace "${package} : SRPM Built${WARN:+ with warnings}"
		else
			trace "${package} : SRPM FAILED TO BUILD"
		fi
	)

	srpm_filepath=$(ls ${srpm_dir}/${package}*.src.rpm | tail -1)
	srpm_records[$package]="${srpm_filepath},${current_revision}"

	record_content=
	for k in "${!srpm_records[@]}"
	do
		if [ -z "${record_content}" ]
		then
			record_content="${k},${srpm_records[${k}]}"
		else
			record_content="${record_content}"$'\n'"${k},${srpm_records[${k}]}"
		fi
	done
	echo "$record_content" > "${srpm_record_file}"
}

##############################################################################

function main()
{
	local package=

	check_commands

	for arg in "$@"
	do
		val=`echo "$arg" | sed -e 's;^--[^=]*=;;'`
		case "$arg" in
			--help)		usage ;;
			-*)		usage ;;
			*)		package="$val" ;;
		esac
	done

	if [ -z "$package" ]; then
		usage
	fi

	[ "${package}" = "all" ] || (echo "${packages[@]}" | sed 's/ /\n/g' | grep -xF "${package}" > /dev/null 2>&1) || fatal "${package} : Package ${package} unknown"

	setup

	if [ "${package}" == "all" ]; then
		for package in "${packages[@]}"
		do
			create_srpm "$package" &> >(tee "${buildlog_dir}/${package}.log")
		done
	else
		create_srpm "$package" &> >(tee "${buildlog_dir}/${package}.log")
	fi

	trace "$(basename "${0}") : Done"
}

main $@
