# Source initial values from runenv. This file is populated by the external build system
# runenv should not be checked in
runenv=$(cd $(dirname $0); pwd -P)/runenv
if [ -r "${runenv}" ]
then
	source "${runenv}"
fi

bin_dir=$(cd $(dirname $0); pwd -P)
root_dir=$(cd $(dirname $0)/../..; pwd -P)

ssm_sourcever="${SSM_VERSION:?Specify SSM_VERSION}"
ssm_releasever="${SSM_BUILD:-1}"
ssm_version="${ssm_sourcever}-${ssm_releasever}"

#Sanity check version
if [[ ! "${ssm_version}" =~ ^[[:digit:]]+\.[[:digit:]]+ ]]
then
	echo "Invalid version specified: ${ssm_version}"
	echo "Must start with a number, a period and another number."
	exit -1
fi

server_build_dir=${root_dir}/tmp/ssm-server
buildimg_build_dir=${root_dir}/tmp/buildimg
submodule_dir=${root_dir}/sources
tmp_dir=/tmp/ssm-build
result_dir=${root_dir}/results
srpm_dir=${result_dir}/SRPMS
rpm_dir=${result_dir}/RPMS
sdeb_dir=${result_dir}/SDEBS
deb_dir=${result_dir}/DEBS
logs_dir=${root_dir}/logs
docs_dir=${root_dir}/docs
audit_dir="${result_dir}/audit"
buildlog_dir="${result_dir}/buildlogs"
record_dir="${result_dir}/records"
docbuild_docker_name="${DOCBUILD_DOCKER_NAME:-shatteredsilicon/docbuild}"
docbuild_docker_tag="${DOCBUILD_DOCKER_TAG:-latest}"
docbuild_docker_image="${DOCBUILD_DOCKER_IMAGE:-${docbuild_docker_name}:${docbuild_docker_tag}}"

rpmbuild_docker_name="${RPMBUILD_DOCKER_NAME:-shatteredsilicon/rpmbuild}"
rpmbuild_docker_tag="${RPMBUILD_DOCKER_TAG:-latest}"
rpmbuild_docker_image="${RPMBUILD_DOCKER_IMAGE:-${rpmbuild_docker_name}:${rpmbuild_docker_tag}}"
rpmbuild_docker_cache_vol="${RPMBUILD_DOCKER_CACHE_VOL:-ssm-build-cache}"

debbuild_docker_name="${DEBBUILD_DOCKER_NAME:-shatteredsilicon/debbuild}"
debbuild_docker_tag="${DEBBUILD_DOCKER_TAG:-latest}"
debbuild_docker_image="${DEBBUILD_DOCKER_IMAGE:-${debbuild_docker_name}:${debbuild_docker_tag}}"

packages=(ssm-qan-app ssm-client percona-toolkit-ssm-minimal ssm-dashboards ssm-manage ssm-managed ssm-server ssm-qan-api rds_exporter snmp_exporter prometheus MariaDB)
deb_packages=(ssm-client)
docker_slim_dir=${root_dir}/build/docker-slim

# Read built srpm records.
# Records are in format "PACKAGE_NAME,FILE_PATH,REVISION"
declare -A srpm_records
srpm_record_file="${record_dir}/srpms"
if [ -r "${srpm_record_file}" ]
then
	while IFS=, read -r package filepath revision; do
		srpm_records["${package}"]="${filepath},${revision}";
	done < "$srpm_record_file"
fi

# Read built rpm records
# Records are in format "PACKAGE_NAME,FILE_PATH[:FILE_PATH],REVISION"
declare -A rpm_records
rpm_record_file="${record_dir}/rpms"
if [ -r "${rpm_record_file}" ]
then
	while IFS=, read -r package filepaths revision; do
		rpm_records["${package}"]="${filepaths},${revision}";
	done < "$rpm_record_file"
fi

# Read built sdeb records
# Records are in format "PACKAGE_NAME,FILE_PATH[:FILE_PATH],REVISION"
declare -A sdeb_records
sdeb_record_file="${record_dir}/sdebs"
if [ -r "${sdeb_record_file}" ]
then
	while IFS=, read -r package filepaths revision; do
		sdeb_records["${package}"]="${filepaths},${revision}";
	done < "$sdeb_record_file"
fi

# Read built deb records
# Records are in format "PACKAGE_NAME,FILE_PATH[:FILE_PATH],REVISION"
declare -A deb_records
deb_record_file="${record_dir}/debs"
if [ -r "${deb_record_file}" ]
then
	while IFS=, read -r package filepaths revision; do
		deb_records["${package}"]="${filepaths},${revision}";
	done < "$deb_record_file"
fi